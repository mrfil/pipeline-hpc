import sys, argparse
import csv
import pandas as pd

ap = argparse.ArgumentParser()
ap.add_argument("i", default="null")
ap.add_argument("o", default="null")
io = ap.parse_args()

inputfile = io.i
outputfile = io.o

print(io.i)
print(io.o)
print(inputfile)
print(outputfile)

infilename = inputfile
outfilename = outputfile

df = pd.read_csv(infilename)
if ('fc36p' in infilename) and ('despike' not in infilename) and ('quality' not in infilename):
    if 'power264' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencypower264fc36p', 'MeanClusteringCoeff':'MeanClusteringCoeffpower264fc36p','MeanClusteringCoeffPos':'MeanClusteringCoeffPospower264fc36p', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegpower264fc36p', 'MeanStrength':'MeanStrengthpower264fc36p','MeanTotalStrength':'MeanTotalStrengthpower264fc36p', 'TotalStrengthPos': 'TotalStrengthPospower264fc36p','TotalStrengthNeg': 'TotalStrengthNegpower264fc36p','OptimalCommunityStructure': 'OptimalCommunityStructurepower264fc36p','MaximizedModularity': 'MaximizedModularitypower264fc36p','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenpower264fc36p'}, inplace = True) 
    elif 'aal116' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencyaal116fc36p', 'MeanClusteringCoeff':'MeanClusteringCoeffaal116fc36p','MeanClusteringCoeffPos':'MeanClusteringCoeffPosaal116fc36p', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegaal116fc36p', 'MeanStrength':'MeanStrengthaal116fc36p','MeanTotalStrength':'MeanTotalStrengthaal116fc36p', 'TotalStrengthPos': 'TotalStrengthPosaal116fc36p','TotalStrengthNeg': 'TotalStrengthNegaal116fc36p','OptimalCommunityStructure': 'OptimalCommunityStructureaal116fc36p','MaximizedModularity': 'MaximizedModularityaal116fc36p','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenaal116fc36p'}, inplace = True)
    elif 'desikanKilliany' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencydesikanKillianyfc36p', 'MeanClusteringCoeff':'MeanClusteringCoeffdesikanKillianyfc36p','MeanClusteringCoeffPos':'MeanClusteringCoeffPosdesikanKillianyfc36p', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegdesikanKillianyfc36p', 'MeanStrength':'MeanStrengthdesikanKillianyfc36p','MeanTotalStrength':'MeanTotalStrengthdesikanKillianyfc36p', 'TotalStrengthPos': 'TotalStrengthPosdesikanKillianyfc36p','TotalStrengthNeg': 'TotalStrengthNegdesikanKillianyfc36p','OptimalCommunityStructure': 'OptimalCommunityStructuredesikanKillianyfc36p','MaximizedModularity': 'MaximizedModularitydesikanKillianyfc36p','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLendesikanKillianyfc36p'}, inplace = True)
elif ('despike' in infilename) and ('quality' not in infilename):
    if 'power264' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencypower264despike', 'MeanClusteringCoeff':'MeanClusteringCoeffpower264despike','MeanClusteringCoeffPos':'MeanClusteringCoeffPospower264despike', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegpower264despike', 'MeanStrength':'MeanStrengthpower264despike','MeanTotalStrength':'MeanTotalStrengthpower264despike', 'TotalStrengthPos': 'TotalStrengthPospower264despike','TotalStrengthNeg': 'TotalStrengthNegpower264despike','OptimalCommunityStructure': 'OptimalCommunityStructurepower264despike','MaximizedModularity':'MaximizedModularitypower264despike','NetworkCharacteristicPathLen':'NetworkCharacteristicPathLenpower264despike'}, inplace = True)
    elif 'aal116' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencyaal116despike', 'MeanClusteringCoeff':'MeanClusteringCoeffaal116despike','MeanClusteringCoeffPos':'MeanClusteringCoeffPosaal116despike', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegaal116despike', 'MeanStrength':'MeanStrengthaal116despike','MeanTotalStrength':'MeanTotalStrengthaal116despike', 'TotalStrengthPos': 'TotalStrengthPosaal116despike','TotalStrengthNeg': 'TotalStrengthNegaal116despike','OptimalCommunityStructure': 'OptimalCommunityStructureaal116despike','MaximizedModularity': 'MaximizedModularityaal116despike','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenaal116despike'}, inplace = True)
    elif 'desikanKilliany' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencydesikanKillianydespike', 'MeanClusteringCoeff':'MeanClusteringCoeffdesikanKillianydespike','MeanClusteringCoeffPos':'MeanClusteringCoeffPosdesikanKillianydespike', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegdesikanKillianydespike', 'MeanStrength':'MeanStrengthdesikanKillianydespike','MeanTotalStrength':'MeanTotalStrengthdesikanKillianydespike', 'TotalStrengthPos': 'TotalStrengthPosdesikanKillianydespike','TotalStrengthNeg': 'TotalStrengthNegdesikanKillianydespike','OptimalCommunityStructure': 'OptimalCommunityStructuredesikanKillianydespike','MaximizedModularity': 'MaximizedModularitydesikanKillianydespike','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLendesikanKillianydespike'}, inplace = True)
elif ('scrub' in infilename) and ('quality' not in infilename):
    if 'power264' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencypower264scrub', 'MeanClusteringCoeff':'MeanClusteringCoeffpower264scrub','MeanClusteringCoeffPos':'MeanClusteringCoeffPospower264scrub', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegpower264scrub', 'MeanStrength':'MeanStrengthpower264scrub','MeanTotalStrength':'MeanTotalStrengthpower264scrub', 'TotalStrengthPos': 'TotalStrengthPospower264scrub','TotalStrengthNeg': 'TotalStrengthNegpower264scrub','OptimalCommunityStructure': 'OptimalCommunityStructurepower264scrub','MaximizedModularity': 'MaximizedModularitypower264scrub','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenpower264scrub'}, inplace = True) 
    elif 'aal116' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencyaal116scrub', 'MeanClusteringCoeff':'MeanClusteringCoeffaal116scrub','MeanClusteringCoeffPos':'MeanClusteringCoeffPosaal116scrub', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegaal116scrub', 'MeanStrength':'MeanStrengthaal116scrub','MeanTotalStrength':'MeanTotalStrengthaal116scrub', 'TotalStrengthPos': 'TotalStrengthPosaal116scrub','TotalStrengthNeg': 'TotalStrengthNegaal116scrub','OptimalCommunityStructure': 'OptimalCommunityStructureaal116scrub','MaximizedModularity': 'MaximizedModularityaal116scrub','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenaal116scrub'}, inplace = True)
    elif 'desikanKilliany' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencydesikanKillianyscrub', 'MeanClusteringCoeff':'MeanClusteringCoeffdesikanKillianyscrub','MeanClusteringCoeffPos':'MeanClusteringCoeffPosdesikanKillianyscrub', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegdesikanKillianyscrub', 'MeanStrength':'MeanStrengthdesikanKillianyscrub','MeanTotalStrength':'MeanTotalStrengthdesikanKillianyscrub', 'TotalStrengthPos': 'TotalStrengthPosdesikanKillianyscrub','TotalStrengthNeg': 'TotalStrengthNegdesikanKillianyscrub','OptimalCommunityStructure': 'OptimalCommunityStructuredesikanKillianyscrub','MaximizedModularity': 'MaximizedModularitydesikanKillianyscrub','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLendesikanKillianyscrub'}, inplace = True)
elif ('aroma' in infilename) and ('quality' not in infilename):
    if 'power264' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencypower264aroma', 'MeanClusteringCoeff':'MeanClusteringCoeffpower264aroma','MeanClusteringCoeffPos':'MeanClusteringCoeffPospower264aroma', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegpower264aroma', 'MeanStrength':'MeanStrengthpower264aroma','MeanTotalStrength':'MeanTotalStrengthpower264aroma', 'TotalStrengthPos': 'TotalStrengthPospower264aroma','TotalStrengthNeg': 'TotalStrengthNegpower264aroma','OptimalCommunityStructure': 'OptimalCommunityStructurepower264aroma','MaximizedModularity': 'MaximizedModularitypower264aroma','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenpower264aroma'}, inplace = True) 
    elif 'aal116' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencyaal116aroma', 'MeanClusteringCoeff':'MeanClusteringCoeffaal116aroma','MeanClusteringCoeffPos':'MeanClusteringCoeffPosaal116aroma', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegaal116aroma', 'MeanStrength':'MeanStrengthaal116aroma','MeanTotalStrength':'MeanTotalStrengthaal116aroma', 'TotalStrengthPos': 'TotalStrengthPosaal116aroma','TotalStrengthNeg': 'TotalStrengthNegaal116aroma','OptimalCommunityStructure': 'OptimalCommunityStructureaal116aroma','MaximizedModularity': 'MaximizedModularityaal116aroma','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLenaal116aroma'}, inplace = True)
    elif 'desikanKilliany' in infilename:
        df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencydesikanKillianyaroma', 'MeanClusteringCoeff':'MeanClusteringCoeffdesikanKillianyaroma','MeanClusteringCoeffPos':'MeanClusteringCoeffPosdesikanKillianyaroma', 'MeanClusteringCoeffNeg':'MeanClusteringCoeffNegdesikanKillianyaroma', 'MeanStrength':'MeanStrengthdesikanKillianyaroma','MeanTotalStrength':'MeanTotalStrengthdesikanKillianyaroma', 'TotalStrengthPos': 'TotalStrengthPosdesikanKillianyaroma','TotalStrengthNeg': 'TotalStrengthNegdesikanKillianyaroma','OptimalCommunityStructure': 'OptimalCommunityStructuredesikanKillianyaroma','MaximizedModularity': 'MaximizedModularitydesikanKillianyaroma','NetworkCharacteristicPathLen': 'NetworkCharacteristicPathLendesikanKillianyaroma'}, inplace = True)
elif 'scfsl' in infilename:
    df.rename(columns = {'GlobalEfficiency':'GlobalEfficiencySC', 'MeanClusteringCoeff':'MeanClusteringCoeffSC','MeanStrength':'MeanStrengthSC','MeanTotalStrength':'MeanTotalStrengthSC'}, inplace = True) 
elif ('quality' in infilename) and ('nbs' not in infilename):
    if 'aroma' in infilename:
        df.rename(columns = {'coregCrossCorr':'coregCrossCorraroma', 'coregJaccard':'coregJaccardaroma', 'coregDice':'coregDicearoma', 'coregCoverage':'coregCoveragearoma', 'relMeanRMSMotion':'relMeanRMSMotionaroma', 'relMaxRMSMotion':'relMaxRMSMotionaroma', 'motionDVCorrInit':'motionDVCorrInitaroma', 'nNuisanceParameters':'nNuisanceParametersaroma', 'nVolCensored':'nVolCensoredaroma', 'normDice':'normDicearoma', 'normCoverage':'normCoveragearoma', 'normJaccard':'normJaccardaroma', 'normCrossCorr':'normCrossCorraroma', 'estimatedLostTemporalDOF':'estimatedLostTemporalDOFaroma', 'motionDVCorrFinal':'motionDVCorrFinalaroma'}, inplace = True)
    elif 'scrub' in infilename:
        df.rename(columns = {'coregCrossCorr':'coregCrossCorrfc36pscrub', 'coregJaccard':'coregJaccardfc36pscrub', 'coregDice':'coregDicefc36pscrub', 'coregCoverage':'coregCoveragefc36pscrub', 'meanDV':'meanDVfc36pscrub', 'pctSpikesDV':'pctSpikesDVfc36pscrub', 'nSpikesFD':'nSpikesFDfc36pscrub', 'pctSpikesFD':'pctSpikesFDfc36pscrub', 'nSpikesDV':'nSpikesDVfc36pscrub', 'relMeanRMSMotion':'relMeanRMSMotionfc36pscrub', 'relMaxRMSMotion':'relMaxRMSMotionfc36pscrub', 'motionDVCorrInit':'motionDVCorrInitfc36pscrub', 'nNuisanceParameters':'nNuisanceParametersfc36pscrub', 'nVolCensored':'nVolCensoredfc36pscrub', 'normDice':'normDicefc36pscrub', 'normCoverage':'normCoveragefc36pscrub', 'normJaccard':'normJaccardfc36pscrub', 'normCrossCorr':'normCrossCorrfc36pscrub', 'estimatedLostTemporalDOF':'estimatedLostTemporalDOFfc36pscrub', 'motionDVCorrFinal':'motionDVCorrFinalfc36pscrub'}, inplace = True)
    elif 'despike' in infilename:
        df.rename(columns = {'coregCrossCorr':'coregCrossCorrfc36pdespike', 'coregJaccard':'coregJaccardfc36pdespike', 'coregDice':'coregDicefc36pdespike', 'coregCoverage':'coregCoveragefc36pdespike', 'meanDV':'meanDVfc36pdespike', 'pctSpikesDV':'pctSpikesDVfc36pdespike', 'nSpikesFD':'nSpikesFDfc36pdespike', 'pctSpikesFD':'pctSpikesFDfc36pdespike', 'nSpikesDV':'nSpikesDVfc36pdespike', 'relMeanRMSMotion':'relMeanRMSMotionfc36pdespike', 'relMaxRMSMotion':'relMaxRMSMotionfc36pdespike', 'motionDVCorrInit':'motionDVCorrInitfc36pdespike', 'nNuisanceParameters':'nNuisanceParametersfc36pdespike', 'nVolCensored':'nVolCensoredfc36pdespike', 'normDice':'normDicefc36pdespike', 'normCoverage':'normCoveragefc36pdespike', 'normJaccard':'normJaccardfc36pdespike', 'normCrossCorr':'normCrossCorrfc36pdespike', 'estimatedLostTemporalDOF':'estimatedLostTemporalDOFfc36pdespike', 'motionDVCorrFinal':'motionDVCorrFinalfc36pdespike'}, inplace = True)
    elif 'nback' in infilename:
        df.rename(columns = {'coregCrossCorr':'coregCrossCorrnback', 'coregJaccard':'coregJaccardnback', 'coregDice':'coregDicenback', 'coregCoverage':'coregCoveragenback', 'relMeanRMeanRMSMotion':'relMeanRMSMotionnback', 'relMaxRMSMotion':'relMaxRMSMotionnback','normDice':'normDicenback', 'normCoverage':'normCoveragenback', 'normJaccard':'normJaccardnback', 'normCrossCorr':'normCrossCorrnback'}, inplace = True)
elif 'mridti_results_tmp.csv' in infilename:
    df.pop('Subjectname')
elif 'mriqc' in infilename:
    if 't1w' in infilename:
        df.rename(columns = {'qi_1':'qi_1_t1w', 'qi_2':'qi_2_t1w', 'rpve_csf':'rpve_csf_t1w', 'rpve_gm':'rpve_gm_t1w', 'rpve_wm':'rpve_wm_t1w', 'snr_csf':'snr_csf_t1w', 'snr_gm':'snr_gm_t1w', 'snr_wm':'snr_wm_t1w', 'snr_total':'snr_total_t1w', 'snrd_csf':'snrd_csf_t1w', 'snrd_gm':'snrd_gm_t1w', 'snrd_wm':'snrd_wm_t1w', 'snrd_total':'snrd_total_t1w', 'tpm_overlap_csf':'tpm_overlap_csf_t1w', 'tpm_overlap_gm':'tpm_overlap_gm_t1w', 'tpm_overlap_wm':'tpm_overlap_wm_t1w', 'wm2max':'wm2max_t1w', 'cjv':'cjv_t1w', 'cnr':'cnr_t1w', 'qi2':'qi2_t1w', 'efc':'efc_t1w', 'fber':'fber_t1w', 'fwhm_avg':'fwhm_avg_t1w', 'fwhm_x':'fwhm_x_t1w', 'fwhm_y':'fwhm_y_t1w', 'fwhm_z':'fwhm_z_t1w', 'icvs_csf':'icvs_csf_t1w', 'icvs_gm':'icvs_gm_t1w', 'icvs_wm':'icvs_wm_t1w'}, inplace = True)
    elif 't2w' in infilename:
        df.rename(columns = {'qi_1':'qi_1_t2w', 'qi_2':'qi_2_t2w', 'rpve_csf':'rpve_csf_t2w', 'rpve_gm':'rpve_gm_t2w', 'rpve_wm':'rpve_wm_t2w', 'snr_csf':'snr_csf_t2w', 'snr_gm':'snr_gm_t2w', 'snr_wm':'snr_wm_t2w', 'snr_total':'snr_total_t2w', 'snrd_csf':'snrd_csf_t2w', 'snrd_gm':'snrd_gm_t2w', 'snrd_wm':'snrd_wm_t2w', 'snrd_total':'snrd_total_t2w', 'tpm_overlap_csf':'tpm_overlap_csf_t2w', 'tpm_overlap_gm':'tpm_overlap_gm_t2w', 'tpm_overlap_wm':'tpm_overlap_wm_t2w', 'wm2max':'wm2max_t2w', 'cjv':'cjv_t2w', 'cnr':'cnr_t2w', 'qi2':'qi2_t2w', 'efc':'efc_t2w', 'fber':'fber_t2w', 'fwhm_avg':'fwhm_avg_t2w', 'fwhm_x':'fwhm_x_t2w', 'fwhm_y':'fwhm_y_t2w', 'fwhm_z':'fwhm_z_t2w', 'icvs_csf':'icvs_csf_t2w', 'icvs_gm':'icvs_gm_t2w', 'icvs_wm':'icvs_wm_t2w'}, inplace = True)
    elif 'rest' in infilename:
        df.rename(columns = {'dvars_nstd':'dvars_nstd_rest', 'dvars_std':'dvars_std_rest', 'dvars_vstd':'dvars_vstd_rest', 'tsnr':'tsnr_rest', 'fd_mean':'fd_mean_rest', 'fd_num':'fd_num_rest', 'fd_perc':'fd_perc_rest', 'gsr_x':'gsr_x_rest', 'gsr_y':'gsr_y_rest', 'gcor':'gcor_rest', 'aor':'aor_rest', 'aqi':'aqi_rest', 'dummy':'dummy_rest', 'efc':'efc_rest', 'fber':'fber_rest', 'fwhm_avg':'fwhm_avg_rest', 'fwhm_x':'fwhm_x_rest', 'fwhm_y':'fwhm_y_rest', 'fwhm_z':'fwhm_z_rest', 'snr':'snr_rest', 'spikes_num':'spikes_num_rest'}, inplace = True)
df.to_csv(outfilename, encoding='utf-8', index=False)
